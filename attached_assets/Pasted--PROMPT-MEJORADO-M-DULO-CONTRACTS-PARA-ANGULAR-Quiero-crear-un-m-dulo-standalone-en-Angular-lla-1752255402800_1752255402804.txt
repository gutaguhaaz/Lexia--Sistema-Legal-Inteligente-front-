🎯 PROMPT MEJORADO - MÓDULO CONTRACTS PARA ANGULAR
Quiero crear un módulo standalone en Angular llamado contracts dentro de la ruta src/app/modules/contracts/. Aquí están los detalles:

🧱 Estructura de archivos:
src/app/modules/contracts/
├── contracts.module.ts
├── contracts-routing.module.ts
├── services/
│   └── contracts.service.ts
├── create-contract/
│   ├── create-contract.component.ts
│   ├── create-contract.component.html
│   └── create-contract.component.scss
├── clause-generator/
│   ├── clause-generator.component.ts
│   ├── clause-generator.component.html
│   └── clause-generator.component.scss
└── models/
    └── contract.models.ts
📌 Routing:
Ruta principal: /contracts
CreateContractComponent en /contracts/generate
ClauseGeneratorComponent en /contracts/generate-clause
📄 CreateContractComponent:
Formulario reactivo que incluya:
Dropdown: Seleccionar tipo de contrato (obtener opciones desde /api/v1/templates)
Campos dinámicos: Se mostrarán según campos que devuelva /api/v1/test-template/{name}
Textarea: Para cláusulas extra (opcional)
Botón: "Generar contrato"
Al hacer clic: Enviar POST a /api/v1/generate-contract y descargar el .docx automáticamente
Funcionalidad extra: Botón "Descargar plantilla original" usando /api/v1/download-template/{name}
💬 ClauseGeneratorComponent:
Textarea: Para prompt libre del usuario
Botón: "Generar cláusula con IA"
Llamar: POST /api/v1/generate-clause-gpt y mostrar la respuesta
Botón: "Insertar en contrato" (almacenar la cláusula para el componente padre)
🔌 Endpoints del Backend (YA IMPLEMENTADOS):
// En contracts.service.ts
getTemplates() // GET /api/v1/templates
getTemplateFields(templateName: string) // GET /api/v1/test-template/{name}
generateContract(request: ContractGenerateRequest) // POST /api/v1/generate-contract
downloadTemplate(templateName: string) // GET /api/v1/download-template/{name}
generateClause(prompt: string) // POST /api/v1/generate-clause-gpt
📝 Modelos TypeScript (crear contracts.models.ts):
export interface ContractGenerateRequest {
  tipo_contrato: string;
  campos: { [key: string]: string };
  clausula_extra?: string;
}
export interface Template {
  name: string;
  fields: string[];
}
export interface GPTClauseRequest {
  prompt: string;
}
export interface GPTClauseResponse {
  clause: string;
  source: string; // "gpt" o "simulado"
}
🎯 Requisitos técnicos:
Módulo independiente: Reusable y limpio
Navegación: Agregar al menú debajo de "Documentos" con ícono de contratos
Hijos del menú: "Generar Contratos" y "Generar Cláusula"
Actualizar: sidebar-items.ts y traducciones en i18n (español, inglés, alemán)
Imports: HttpClient, ReactiveFormsModule
UX: Loader al generar, manejo de errores, SnackBar para notificaciones
Layout: Seguir la lógica de document-dashboard
🔄 Funcionalidades adicionales:
Vista previa: Mostrar campos antes de generar
Validación: Formulario con mensajes específicos
Botón: "Limpiar formulario"
Descarga automática: Al recibir el blob del backend
📊 Flujo completo:
Cargar plantillas → /api/v1/templates
Seleccionar tipo → /api/v1/test-template/{name} (obtener campos)
Llenar campos → Formulario dinámico
Generar contrato → /api/v1/generate-contract → Descarga automática
Descargar plantilla → /api/v1/download-template/{name} (opcional)
🛠️ Manejo de archivos:
Respuesta del backend: application/vnd.openxmlformats-officedocument.wordprocessingml.document
Descarga automática: Crear enlace temporal y trigger click
Nombre del archivo: contrato_{tipo}_{cliente}.docx
⚠️ Puntos importantes:
NO borrar: Metodología anterior que sirve
Reutilizar: Servicios existentes como base
Consistencia: Seguir patrones del proyecto actual
Responsividad: Asegurar funcionalidad en móviles
Este prompt complementado incluye toda la información del backend necesaria para crear un módulo completamente funcional e integrado con tu API existente.