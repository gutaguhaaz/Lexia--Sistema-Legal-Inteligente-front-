js?key=AIzaSyAbvyBxmMbFhrzP9Z8moyYr6dCr-pzjhBE&callback=Function.prototype:289 Google Maps JavaScript API has been loaded directly without loading=async. This can result in suboptimal performance. For best-practice loading patterns please see https://goo.gle/js-api-loading
bda @ js?key=AIzaSyAbvyBxmMbFhrzP9Z8moyYr6dCr-pzjhBE&callback=Function.prototype:289
index.js:485 [webpack-dev-server] Server started: Hot Module Replacement disabled, Live Reloading enabled, Progress disabled, Overlay enabled.
core.mjs:29869 Angular is running in development mode.
core.mjs:6531 ERROR RuntimeError: NG01050: formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    
  <div [formGroup]="myGroup">
    <input formControlName="firstName">
  </div>

  In your class:

  this.myGroup = new FormGroup({
      firstName: new FormControl()
  });
    at controlParentException (forms.mjs:1416:12)
    at FormControlName._checkParentType (forms.mjs:5362:23)
    at FormControlName._setUpControl (forms.mjs:5367:14)
    at FormControlName.ngOnChanges (forms.mjs:5313:18)
    at FormControlName.rememberChangeHistoryAndInvokeOnChangesHook (core.mjs:4101:14)
    at callHookInternal (core.mjs:5136:14)
    at callHook (core.mjs:5167:9)
    at callHooks (core.mjs:5118:17)
    at executeInitAndCheckHooks (core.mjs:5068:9)
    at selectIndexInternal (core.mjs:11029:17)
handleError @ core.mjs:6531
forms.mjs:5270 
  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
  you. We recommend using this approach to avoid 'changed after checked' errors.

  Example:
  // Specify the `disabled` property at control creation time:
  form = new FormGroup({
    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
    last: new FormControl('Drew', Validators.required)
  });

  // Controls can also be enabled/disabled after creation:
  form.get('first')?.enable();
  form.get('last')?.disable();

set isDisabled @ forms.mjs:5270
zone.js:2317 TypeError: Cannot read properties of undefined (reading 'x')
    at t.value (apexcharts.common.js:6:126530)
    at t.value (apexcharts.common.js:6:126179)
    at t.value (apexcharts.common.js:6:133579)
    at t.value (apexcharts.common.js:6:136381)
    at t.value (apexcharts.common.js:14:38241)
    at t.create (apexcharts.common.js:6:5550)
    at apexcharts.common.js:14:37073
    at new ZoneAwarePromise (zone.js:2702:25)
    at t.value (apexcharts.common.js:14:21768)
    at ng-apexcharts.mjs:101:74
api.onUnhandledError @ zone.js:2317
zone.js:2317 TypeError: Cannot read properties of undefined (reading 'hidden')
    at apexcharts.common.js:14:37875
    at Array.forEach (<anonymous>)
    at t.value (apexcharts.common.js:14:37850)
    at t.create (apexcharts.common.js:6:5550)
    at apexcharts.common.js:14:37073
    at new ZoneAwarePromise (zone.js:2702:25)
    at t.value (apexcharts.common.js:14:21768)
    at ng-apexcharts.mjs:101:74
    at _ZoneDelegate.invoke (zone.js:369:28)
    at ZoneImpl.run (zone.js:111:43)
api.onUnhandledError @ zone.js:2317
