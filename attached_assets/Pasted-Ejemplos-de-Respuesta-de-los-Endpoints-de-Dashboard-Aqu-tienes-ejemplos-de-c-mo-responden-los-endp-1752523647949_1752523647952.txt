Ejemplos de Respuesta de los Endpoints de Dashboard
Aquí tienes ejemplos de cómo responden los endpoints del dashboard para que el frontend pueda ajustar correctamente el servicio:

1. GET /api/v1/dashboard/summary
URL: http://localhost:8000/api/v1/dashboard/summary

Respuesta:

{
  "document_count": 15,
  "risk_clause_count": 8,
  "template_count": 5,
  "gpt_enabled": true
}
Uso en Frontend:

document_count: Total de documentos para mostrar en tarjeta principal
risk_clause_count: Cláusulas riesgosas detectadas (indicador de alerta)
template_count: Plantillas disponibles para generación de contratos
gpt_enabled: Mostrar/ocultar funciones de IA según disponibilidad
2. GET /api/v1/dashboard/type-distribution
URL: http://localhost:8000/api/v1/dashboard/type-distribution

Respuesta:

[
  {
    "type": "NDA",
    "count": 5
  },
  {
    "type": "Servicios", 
    "count": 3
  },
  {
    "type": "Laboral",
    "count": 2
  },
  {
    "type": "Cesión",
    "count": 3
  },
  {
    "type": "Colaboración",
    "count": 2
  }
]
Uso en Frontend:

Gráfico de Dona/Pie: Mostrar distribución porcentual por tipo
Lista de Tipos: Crear filtros dinámicos por tipo de contrato
Colores dinámicos: Asignar colores únicos a cada tipo
3. GET /api/v1/dashboard/documents-per-month
URL: http://localhost:8000/api/v1/dashboard/documents-per-month

Respuesta:

[
  {
    "month": "2024-01",
    "count": 10
  },
  {
    "month": "2024-02", 
    "count": 5
  },
  {
    "month": "2024-03",
    "count": 8
  },
  {
    "month": "2024-04",
    "count": 12
  },
  {
    "month": "2024-05",
    "count": 7
  },
  {
    "month": "2024-06",
    "count": 15
  }
]
Uso en Frontend:

Gráfico de Líneas/Barras: Tendencia temporal de documentos
Formateo de fechas: Convertir "2024-01" a "Enero 2024"
Indicadores de crecimiento: Calcular % de cambio mes a mes
4. GET /api/v1/dashboard/status
URL: http://localhost:8000/api/v1/dashboard/status

Respuesta:

{
  "gpt_enabled": true,
  "mongo_connected": true, 
  "ml_loaded": true,
  "templates_available": true,
  "template_count": 5
}
Uso en Frontend:

Indicadores de Estado: Semáforos verde/rojo por servicio
Alertas de Sistema: Mostrar avisos si algún servicio está down
Habilitación de Funciones: Activar/desactivar botones según estado
Panel de Administración: Monitoreo en tiempo real
Ejemplo de Implementación en Frontend (JavaScript)
// Servicio para consumir los endpoints
class DashboardService {
  static BASE_URL = 'http://localhost:8000/api/v1/dashboard';
  static async getSummary() {
    const response = await fetch(`${this.BASE_URL}/summary`);
    return await response.json();
  }
  static async getTypeDistribution() {
    const response = await fetch(`${this.BASE_URL}/type-distribution`);
    return await response.json();
  }
  static async getDocumentsPerMonth() {
    const response = await fetch(`${this.BASE_URL}/documents-per-month`);
    return await response.json();
  }
  static async getSystemStatus() {
    const response = await fetch(`${this.BASE_URL}/status`);
    return await response.json();
  }
}
Estado Actual: Todos los endpoints están completamente funcionales y devuelven datos reales de tu base de datos MongoDB.