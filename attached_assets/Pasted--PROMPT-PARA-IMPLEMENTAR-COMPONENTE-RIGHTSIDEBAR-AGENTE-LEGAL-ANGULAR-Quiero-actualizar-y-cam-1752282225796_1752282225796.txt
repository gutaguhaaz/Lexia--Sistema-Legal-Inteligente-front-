ü§ñ PROMPT PARA IMPLEMENTAR COMPONENTE RIGHTSIDEBAR - AGENTE LEGAL (ANGULAR)
Quiero actualizar y cambiar un componente Angular en el comopnente  rightsidebar (‚Äúsrc/app/layout/right-sidebar/ que implemente un chat inteligente con el Agente Legal GPT que desarroll√© en mi backend FastAPI. Actualmente est√° una configuradci√≥n del tema que podemos omitir para mejor usar el chat.
üéØ OBJETIVO
ya esta creado el componente del panel de lado dereho,  que se desliza  en la barra lateral derecha, deber√° funcionar  como chat conversacional con el agente legal, permitiendo consultas contextuales sobre documentos almacenados. 


SERVICE. 
Porfavor los endpoints apunten con la misma logica que ‚ÄúDocuments.service.ts‚Äù que apunte a environments (prefijo) no pongas localhost ni nada por el asunto, entendido para este componente. si falta un service puedes agregar el service en esacarpeta de rightservice. 

üìã ESPECIFICACIONES T√âCNICAS
1. Ubicaci√≥n y Estructura
Componente: rightsidebar.component.ts/html/css
Ubicaci√≥n: src/app/layout/right-sidebar/rightsidebar/
Selector: <app-rightsidebar>
2. Funcionalidades Principales
A) Chat Interface:
Input de texto para preguntas del usuario
Bot√≥n de env√≠o con icono de avi√≥n/flecha
Historial de conversaci√≥n (scroll autom√°tico)
Indicador de "escribiendo..." mientras procesa
Bot√≥n de limpiar chat
B) Selecci√≥n de Contexto:
Dropdown para seleccionar documento (opcional)
Lista de documentos desde /api/v1/documents
Opci√≥n "Sin contexto" para consultas generales
Preview del documento seleccionado (nombre + tipo)
C) Estados y Validaciones:
Bot√≥n deshabilitado si no hay texto
Manejo de estados de carga
Mensajes de error amigables
Indicador de estado del agente (activo/deshabilitado)
3. Integraci√≥n con Backend
Endpoints a consumir:
// Consulta principal
POST /api/v1/legal-agent/gpt
{
 "texto": "¬øEsta cl√°usula es riesgosa?",
 "document_id": "optional-id"
}
// Estado del agente
GET /api/v1/legal-agent/status
// Lista de documentos
GET /api/v1/documents
Modelos TypeScript esperados:
interface PreguntaGPT {
 texto: string;
 document_id?: string;
}
interface RespuestaGPT {
 respuesta: string;
 fuente?: string;
}
interface AgentStatus {
 gpt_enabled: boolean;
 api_key_configured: boolean;
 status: string;
}
4. UX/UI Requirements
Dise√±o:
Ancho fijo: 400px
Altura: 100vh (sidebar completa)
Background: #f8f9fa
Border-left: 1px solid #dee2e6
Elementos visuales:
Header con t√≠tulo "ü§ñ Agente Legal"
Indicador de estado (verde=activo, rojo=deshabilitado)
Burbujas de chat diferenciadas (usuario vs agente)
Iconos: usuario (üë§), agente (‚öñÔ∏è)
Loading spinner durante consultas
Responsive:
En mobile: overlay que se puede abrir/cerrar
Bot√≥n hamburger para toggle en pantallas peque√±as
5. Comportamiento Esperado
Al cargar: Verificar estado del agente (/legal-agent/status)
Al enviar pregunta:
Mostrar mensaje del usuario inmediatamente
Mostrar indicador de "escribiendo..."
Enviar request a /legal-agent/gpt
Mostrar respuesta del agente
Scroll autom√°tico al final
Manejo de errores:
Si GPT est√° deshabilitado: mostrar mensaje informativo
Si hay error de red: mostrar bot√≥n de reintentar
Si no hay API key: mostrar mensaje de configuraci√≥n
Contexto de documentos:
Al seleccionar documento: mostrar preview
Incluir document_id en las consultas
Mostrar fuente de informaci√≥n si est√° disponible
6. Caracter√≠sticas Avanzadas
Sugerencias de preguntas: Botones con preguntas predefinidas
Export chat: Opci√≥n para descargar conversaci√≥n
B√∫squeda en historial: Input para filtrar mensajes anteriores
Modo oscuro: Toggle para cambiar tema
Shortcuts de teclado: Enter para enviar, Ctrl+L para limpiar

üîß SERVICIOS NECESARIOS
// legal-agent.service.ts
@Injectable()
export class LegalAgentService {
 async consultarAgente(pregunta: PreguntaGPT): Promise<RespuestaGPT>
 async obtenerEstado(): Promise<AgentStatus>
 async obtenerDocumentos(): Promise<Document[]>
}

üì± EJEMPLO DE USO
<!-- En el layout principal -->
<div class="main-layout">
 <div class="content">
   <!-- Contenido principal -->
 </div>
 <app-rightsidebar></app-rightsidebar>
</div>

‚ö†Ô∏è CONSIDERACIONES IMPORTANTES
Manejo de estado: Usar el estado del agente para habilitar/deshabilitar funcionalidades
Performance: Implementar debounce en el input si es necesario
Accesibilidad: ARIA labels y navegaci√≥n por teclado
Testing: Unit tests para el servicio y component tests b√°sicos
No cambiar metodos funcionales:
Actualmente est√° en ese componente para personalizar el tema, pero lo quiero reemplazar por este chat.

üé® PREGUNTAS SUGERIDAS PREDEFINIDAS
const PREGUNTAS_SUGERIDAS = [
 "¬øQu√© cl√°usulas riesgosas detectas en este contrato?",
 "¬øEsta cl√°usula de confidencialidad es demasiado restrictiva?",
 "¬øQu√© significa esta cl√°usula en t√©rminos simples?",
 "¬øHay alg√∫n riesgo legal en este documento?",
 "¬øQu√© recomendaciones tienes para mejorar este contrato?"
];
Implementa este componente siguiendo las mejores pr√°cticas de Angular, con servicios separados, manejo de errores robusto y una interfaz intuitiva que haga que interactuar con el agente legal sea una experiencia fluida y profesional. Y cuida los errores del componente anterior que cambiaba o personalizaba el tema‚Ä¶
